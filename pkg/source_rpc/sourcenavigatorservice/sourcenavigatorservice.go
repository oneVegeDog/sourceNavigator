// Code generated by Kitex v0.7.1. DO NOT EDIT.

package sourcenavigatorservice

import (
			"context"
				client "github.com/cloudwego/kitex/client"
				kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
				source_rpc "github.com/oneVegeDog/sourceNavigator/pkg/source_rpc"
)

func serviceInfo() *kitex.ServiceInfo {
	return sourceNavigatorServiceServiceInfo
 }

var sourceNavigatorServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "SourceNavigatorService"
	handlerType := (*source_rpc.SourceNavigatorService)(nil)
	methods := map[string]kitex.MethodInfo{
		"register":
			kitex.NewMethodInfo(registerHandler, newSourceNavigatorServiceRegisterArgs, newSourceNavigatorServiceRegisterResult, false),
		"findUserByName":
			kitex.NewMethodInfo(findUserByNameHandler, newSourceNavigatorServiceFindUserByNameArgs, newSourceNavigatorServiceFindUserByNameResult, false),
		"checkedUser":
			kitex.NewMethodInfo(checkedUserHandler, newSourceNavigatorServiceCheckedUserArgs, newSourceNavigatorServiceCheckedUserResult, false),
		"addSource":
			kitex.NewMethodInfo(addSourceHandler, newSourceNavigatorServiceAddSourceArgs, newSourceNavigatorServiceAddSourceResult, false),
		"findSourceByName":
			kitex.NewMethodInfo(findSourceByNameHandler, newSourceNavigatorServiceFindSourceByNameArgs, newSourceNavigatorServiceFindSourceByNameResult, false),
		"getSourcesByPage":
			kitex.NewMethodInfo(getSourcesByPageHandler, newSourceNavigatorServiceGetSourcesByPageArgs, newSourceNavigatorServiceGetSourcesByPageResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":	 "source_rpc",
		"ServiceFilePath": "..\idl\kitex_rpc\sourceNavigator.thrift",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName: 	 serviceName,
		HandlerType: 	 handlerType,
		Methods:     	 methods,
		PayloadCodec:  	 kitex.Thrift,
		KiteXGenVersion: "v0.7.1",
		Extra:           extra,
	}
	return svcInfo
}



func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error { 
	realArg := arg.(*source_rpc.SourceNavigatorServiceRegisterArgs)
	realResult := result.(*source_rpc.SourceNavigatorServiceRegisterResult)
	success, err := handler.(source_rpc.SourceNavigatorService).Register(ctx, realArg.Req)
	if err != nil {
	return err
	}
	realResult.Success = success
	return nil 
}
func newSourceNavigatorServiceRegisterArgs() interface{} {
	return source_rpc.NewSourceNavigatorServiceRegisterArgs()
}

func newSourceNavigatorServiceRegisterResult() interface{} {
	return source_rpc.NewSourceNavigatorServiceRegisterResult()
}


func findUserByNameHandler(ctx context.Context, handler interface{}, arg, result interface{}) error { 
	realArg := arg.(*source_rpc.SourceNavigatorServiceFindUserByNameArgs)
	realResult := result.(*source_rpc.SourceNavigatorServiceFindUserByNameResult)
	success, err := handler.(source_rpc.SourceNavigatorService).FindUserByName(ctx, realArg.Req)
	if err != nil {
	return err
	}
	realResult.Success = success
	return nil 
}
func newSourceNavigatorServiceFindUserByNameArgs() interface{} {
	return source_rpc.NewSourceNavigatorServiceFindUserByNameArgs()
}

func newSourceNavigatorServiceFindUserByNameResult() interface{} {
	return source_rpc.NewSourceNavigatorServiceFindUserByNameResult()
}


func checkedUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error { 
	realArg := arg.(*source_rpc.SourceNavigatorServiceCheckedUserArgs)
	realResult := result.(*source_rpc.SourceNavigatorServiceCheckedUserResult)
	success, err := handler.(source_rpc.SourceNavigatorService).CheckedUser(ctx, realArg.Req)
	if err != nil {
	return err
	}
	realResult.Success = success
	return nil 
}
func newSourceNavigatorServiceCheckedUserArgs() interface{} {
	return source_rpc.NewSourceNavigatorServiceCheckedUserArgs()
}

func newSourceNavigatorServiceCheckedUserResult() interface{} {
	return source_rpc.NewSourceNavigatorServiceCheckedUserResult()
}


func addSourceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error { 
	realArg := arg.(*source_rpc.SourceNavigatorServiceAddSourceArgs)
	realResult := result.(*source_rpc.SourceNavigatorServiceAddSourceResult)
	success, err := handler.(source_rpc.SourceNavigatorService).AddSource(ctx, realArg.AddReq)
	if err != nil {
	return err
	}
	realResult.Success = success
	return nil 
}
func newSourceNavigatorServiceAddSourceArgs() interface{} {
	return source_rpc.NewSourceNavigatorServiceAddSourceArgs()
}

func newSourceNavigatorServiceAddSourceResult() interface{} {
	return source_rpc.NewSourceNavigatorServiceAddSourceResult()
}


func findSourceByNameHandler(ctx context.Context, handler interface{}, arg, result interface{}) error { 
	realArg := arg.(*source_rpc.SourceNavigatorServiceFindSourceByNameArgs)
	realResult := result.(*source_rpc.SourceNavigatorServiceFindSourceByNameResult)
	success, err := handler.(source_rpc.SourceNavigatorService).FindSourceByName(ctx, realArg.FindReq)
	if err != nil {
	return err
	}
	realResult.Success = success
	return nil 
}
func newSourceNavigatorServiceFindSourceByNameArgs() interface{} {
	return source_rpc.NewSourceNavigatorServiceFindSourceByNameArgs()
}

func newSourceNavigatorServiceFindSourceByNameResult() interface{} {
	return source_rpc.NewSourceNavigatorServiceFindSourceByNameResult()
}


func getSourcesByPageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error { 
	realArg := arg.(*source_rpc.SourceNavigatorServiceGetSourcesByPageArgs)
	realResult := result.(*source_rpc.SourceNavigatorServiceGetSourcesByPageResult)
	success, err := handler.(source_rpc.SourceNavigatorService).GetSourcesByPage(ctx, realArg.GetReq)
	if err != nil {
	return err
	}
	realResult.Success = success
	return nil 
}
func newSourceNavigatorServiceGetSourcesByPageArgs() interface{} {
	return source_rpc.NewSourceNavigatorServiceGetSourcesByPageArgs()
}

func newSourceNavigatorServiceGetSourcesByPageResult() interface{} {
	return source_rpc.NewSourceNavigatorServiceGetSourcesByPageResult()
}


type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}


func (p *kClient) Register(ctx context.Context , req *source_rpc.CreateUserReq) (r *source_rpc.Baseresp, err error) {
	var _args source_rpc.SourceNavigatorServiceRegisterArgs
	_args.Req = req
	var _result source_rpc.SourceNavigatorServiceRegisterResult
	if err = p.c.Call(ctx, "register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FindUserByName(ctx context.Context , req *source_rpc.FindUserReq) (r *source_rpc.FindUserResp, err error) {
	var _args source_rpc.SourceNavigatorServiceFindUserByNameArgs
	_args.Req = req
	var _result source_rpc.SourceNavigatorServiceFindUserByNameResult
	if err = p.c.Call(ctx, "findUserByName", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckedUser(ctx context.Context , req *source_rpc.CheckUserReq) (r *source_rpc.CheckUserResp, err error) {
	var _args source_rpc.SourceNavigatorServiceCheckedUserArgs
	_args.Req = req
	var _result source_rpc.SourceNavigatorServiceCheckedUserResult
	if err = p.c.Call(ctx, "checkedUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddSource(ctx context.Context , addReq *source_rpc.AddSourceReq) (r *source_rpc.AddSourceResp, err error) {
	var _args source_rpc.SourceNavigatorServiceAddSourceArgs
	_args.AddReq = addReq
	var _result source_rpc.SourceNavigatorServiceAddSourceResult
	if err = p.c.Call(ctx, "addSource", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FindSourceByName(ctx context.Context , findReq *source_rpc.FindSourceByNameReq) (r *source_rpc.FindSourceByNameResp, err error) {
	var _args source_rpc.SourceNavigatorServiceFindSourceByNameArgs
	_args.FindReq = findReq
	var _result source_rpc.SourceNavigatorServiceFindSourceByNameResult
	if err = p.c.Call(ctx, "findSourceByName", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSourcesByPage(ctx context.Context , getReq *source_rpc.GetPageSourceReq) (r *source_rpc.GetPageSourceResp, err error) {
	var _args source_rpc.SourceNavigatorServiceGetSourcesByPageArgs
	_args.GetReq = getReq
	var _result source_rpc.SourceNavigatorServiceGetSourcesByPageResult
	if err = p.c.Call(ctx, "getSourcesByPage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

